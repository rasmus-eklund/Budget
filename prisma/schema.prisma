// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    txs           Txs[]
    Budgetgrupp   Budgetgrupp[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Txs {
    id          String   @id @default(cuid())
    datum       DateTime
    text        String
    typ         String
    budgetgrupp String
    belopp      Decimal
    saldo       Decimal
    konto       String
    person      String
    index       Int
    User        User     @relation(fields: [userId], references: [id])
    userId      String
}

model Budgetgrupp {
    id      String  @id @default(cuid())
    namn    String  @unique
    matches Match[]
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
}

model Match {
    id            String      @id @default(cuid())
    namn          String      @unique
    Budgetgrupp   Budgetgrupp @relation(fields: [budgetgruppId], references: [id], onDelete: Cascade)
    budgetgruppId String
}
